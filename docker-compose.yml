version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: vendora_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: vendora_redis

  backend:
    build: ./backend
    container_name: vendora_backend
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 0.1; done;
        echo 'Database started.' &&
        python manage.py migrate &&
        gunicorn vendora_backend.wsgi:application -b 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - POSTGRES_HOST=db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_worker:
    build: ./backend
    container_name: vendora_celery_worker
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 0.1; done;
        echo 'Database started.' &&
        celery -A vendora_backend worker -l info
      "
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - POSTGRES_HOST=db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - backend # Ensures migrations run first

  celery_beat:
    build: ./backend
    container_name: vendora_celery_beat
    command: >
      sh -c "
        # Wait for the backend to run migrations
        echo 'Waiting for backend...' &&
        while ! nc -z backend 8000; do sleep 0.1; done;
        echo 'Backend started.' &&
        celery -A vendora_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_HOST=db
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - backend

volumes:
  postgres_data: